module.exports = async (req, env) => {
  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization",
  };

  if (req.method === "OPTIONS") {
    return new Response(null, { status: 204, headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response(JSON.stringify({ error: "Only POST allowed" }), {
      status: 405,
      headers: corsHeaders,
    });
  }

  const token = req.headers.get("authorization");
  if (token !== `Bearer ${env.ADMIN_PASSWORD}`) {
    return new Response(JSON.stringify({ error: "Unauthorized" }), {
      status: 403,
      headers: corsHeaders,
    });
  }

  let body;
try {
  body = await req.json();
  console.log("üì¶ Incoming JSON Body:", body);
  console.log("üß™ Header Authorization:", token);
} catch (err) {
  console.error("‚ùå Failed to parse body:", err);
  return new Response(JSON.stringify({ error: "Invalid JSON" }), {
    status: 400,
    headers: corsHeaders,
  });
}


  const { customerId } = body;
  if (!customerId || !customerId.startsWith("cus_")) {
    return new Response(JSON.stringify({ error: "Invalid customer ID" }), {
      status: 400,
      headers: corsHeaders,
    });
  }

  try {
    const now = new Date();
    const monthKey = `${customerId}_${now.getFullYear()}-${now.getMonth() + 1}`;
    await env.USAGE_KV.put(monthKey, "0");
    console.log(`‚úÖ Reset usage for: ${monthKey}`);
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: corsHeaders,
    });
  } catch (err) {
    console.error("‚ùå Error resetting usage:", err);
    return new Response(JSON.stringify({ error: "Failed to reset usage." }), {
      status: 500,
      headers: corsHeaders,
    });
  }
};
